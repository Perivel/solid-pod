{"version":3,"file":"browser.js","sources":["../../../node_modules/solid-app-router/dist/routing.js"],"sourcesContent":["import { createComponent, createContext, createMemo, createRenderEffect, createSignal, on, onCleanup, untrack, useContext, useTransition, resetErrorBoundaries } from \"solid-js\";\nimport { isServer } from \"solid-js/web\";\nimport { normalizeIntegration } from \"./integration\";\nimport { createMemoObject, extractSearchParams, invariant, resolvePath, createMatcher, joinPaths, scoreRoute, mergeSearchString } from \"./utils\";\nconst MAX_REDIRECTS = 100;\nexport const RouterContextObj = createContext();\nexport const RouteContextObj = createContext();\nexport const useRouter = () => invariant(useContext(RouterContextObj), \"Make sure your app is wrapped in a <Router />\");\nexport const useRoute = () => useContext(RouteContextObj) || useRouter().base;\nexport const useResolvedPath = (path) => {\n    const route = useRoute();\n    return createMemo(() => route.resolvePath(path()));\n};\nexport const useHref = (to) => {\n    const router = useRouter();\n    return createMemo(() => {\n        const to_ = to();\n        return to_ !== undefined ? router.renderPath(to_) : to_;\n    });\n};\nexport const useNavigate = () => useRouter().navigatorFactory();\nexport const useLocation = () => useRouter().location;\nexport const useIsRouting = () => useRouter().isRouting;\nexport const useMatch = (path) => {\n    const location = useLocation();\n    const matcher = createMemo(() => createMatcher(path()));\n    return createMemo(() => matcher()(location.pathname));\n};\nexport const useParams = () => useRoute().params;\nexport const useRouteData = () => useRoute().data;\nexport const useSearchParams = () => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const setSearchParams = (params, options) => {\n        const searchString = mergeSearchString(location.search, params);\n        navigate(searchString ? `?${searchString}` : \"\", { scroll: false, ...options, resolve: true });\n    };\n    return [location.query, setSearchParams];\n};\nexport function createRoute(routeDef, base = \"\", fallback) {\n    const { path: originalPath, component, data, children } = routeDef;\n    const isLeaf = !children || (Array.isArray(children) && !children.length);\n    const path = joinPaths(base, originalPath);\n    const pattern = isLeaf ? path : path.split(\"/*\", 1)[0];\n    return {\n        originalPath,\n        pattern,\n        element: component\n            ? () => createComponent(component, {})\n            : () => {\n                const { element } = routeDef;\n                return element === undefined && fallback\n                    ? createComponent(fallback, {})\n                    : element;\n            },\n        preload: routeDef.component\n            ? component.preload\n            : routeDef.preload,\n        data,\n        matcher: createMatcher(pattern, !isLeaf)\n    };\n}\nexport function createBranch(routes, index = 0) {\n    return {\n        routes,\n        score: scoreRoute(routes[routes.length - 1]) * 10000 - index,\n        matcher(location) {\n            const matches = [];\n            for (let i = routes.length - 1; i >= 0; i--) {\n                const route = routes[i];\n                const match = route.matcher(location);\n                if (!match) {\n                    return null;\n                }\n                matches.unshift({\n                    ...match,\n                    route\n                });\n            }\n            return matches;\n        }\n    };\n}\nexport function createBranches(routeDef, base = \"\", fallback, stack = [], branches = []) {\n    const routeDefs = Array.isArray(routeDef) ? routeDef : [routeDef];\n    for (let i = 0, len = routeDefs.length; i < len; i++) {\n        const def = routeDefs[i];\n        if (def && typeof def === \"object\" && def.hasOwnProperty(\"path\")) {\n            const route = createRoute(def, base, fallback);\n            stack.push(route);\n            if (def.children) {\n                createBranches(def.children, route.pattern, fallback, stack, branches);\n            }\n            else {\n                const branch = createBranch([...stack], branches.length);\n                branches.push(branch);\n            }\n            stack.pop();\n        }\n    }\n    // Stack will be empty on final return\n    return stack.length ? branches : branches.sort((a, b) => b.score - a.score);\n}\nexport function getRouteMatches(branches, location) {\n    for (let i = 0, len = branches.length; i < len; i++) {\n        const match = branches[i].matcher(location);\n        if (match) {\n            return match;\n        }\n    }\n    return [];\n}\nexport function createLocation(path, state) {\n    const origin = new URL(\"http://sar\");\n    const url = createMemo(prev => {\n        const path_ = path();\n        try {\n            return new URL(path_, origin);\n        }\n        catch (err) {\n            console.error(`Invalid path ${path_}`);\n            return prev;\n        }\n    }, origin, {\n        equals: (a, b) => a.href === b.href\n    });\n    const pathname = createMemo(() => url().pathname);\n    const search = createMemo(() => url().search.slice(1));\n    const hash = createMemo(() => url().hash.slice(1));\n    const key = createMemo(() => \"\");\n    return {\n        get pathname() {\n            return pathname();\n        },\n        get search() {\n            return search();\n        },\n        get hash() {\n            return hash();\n        },\n        get state() {\n            return state();\n        },\n        get key() {\n            return key();\n        },\n        query: createMemoObject(on(search, () => extractSearchParams(url())))\n    };\n}\nexport function createRouterContext(integration, base = \"\", data, out) {\n    const { signal: [source, setSource], utils = {} } = normalizeIntegration(integration);\n    const parsePath = utils.parsePath || (p => p);\n    const renderPath = utils.renderPath || (p => p);\n    const basePath = resolvePath(\"\", base);\n    const output = isServer && out\n        ? Object.assign(out, {\n            matches: [],\n            url: undefined\n        })\n        : undefined;\n    if (basePath === undefined) {\n        throw new Error(`${basePath} is not a valid base path`);\n    }\n    else if (basePath && !source().value) {\n        setSource({ value: basePath, replace: true, scroll: false });\n    }\n    const [isRouting, start] = useTransition();\n    const [reference, setReference] = createSignal(source().value);\n    const [state, setState] = createSignal(source().state);\n    const location = createLocation(reference, state);\n    const referrers = [];\n    const baseRoute = {\n        pattern: basePath,\n        params: {},\n        path: () => basePath,\n        outlet: () => null,\n        resolvePath(to) {\n            return resolvePath(basePath, to);\n        }\n    };\n    baseRoute.data =\n        data &&\n            data({\n                data: undefined,\n                params: {},\n                location,\n                navigate: navigatorFactory(baseRoute)\n            });\n    function navigateFromRoute(route, to, options) {\n        // Untrack in case someone navigates in an effect - don't want to track `reference` or route paths\n        untrack(() => {\n            if (typeof to === \"number\") {\n                if (!to) {\n                    // A delta of 0 means stay at the current location, so it is ignored\n                }\n                else if (utils.go) {\n                    utils.go(to);\n                }\n                else {\n                    console.warn(\"Router integration does not support relative routing\");\n                }\n                return;\n            }\n            const { replace, resolve, scroll, state: nextState } = {\n                replace: false,\n                resolve: true,\n                scroll: true,\n                ...options\n            };\n            const resolvedTo = resolve ? route.resolvePath(to) : resolvePath(\"\", to);\n            if (resolvedTo === undefined) {\n                throw new Error(`Path '${to}' is not a routable path`);\n            }\n            else if (referrers.length >= MAX_REDIRECTS) {\n                throw new Error(\"Too many redirects\");\n            }\n            const current = reference();\n            if (resolvedTo !== current || nextState !== state()) {\n                if (isServer) {\n                    if (output) {\n                        output.url = resolvedTo;\n                    }\n                    setSource({ value: resolvedTo, replace, scroll, state: nextState });\n                }\n                else {\n                    const len = referrers.push({ value: current, replace, scroll, state });\n                    start(() => {\n                        setReference(resolvedTo);\n                        setState(nextState);\n                        resetErrorBoundaries();\n                    }).then(() => {\n                        if (referrers.length === len) {\n                            navigateEnd({\n                                value: resolvedTo,\n                                state: nextState\n                            });\n                        }\n                    });\n                }\n            }\n        });\n    }\n    function navigatorFactory(route) {\n        // Workaround for vite issue (https://github.com/vitejs/vite/issues/3803)\n        route = route || useContext(RouteContextObj) || baseRoute;\n        return (to, options) => navigateFromRoute(route, to, options);\n    }\n    function navigateEnd(next) {\n        const first = referrers[0];\n        if (first) {\n            if (next.value !== first.value || next.state !== first.state) {\n                setSource({\n                    ...next,\n                    replace: first.replace,\n                    scroll: first.scroll\n                });\n            }\n            referrers.length = 0;\n        }\n    }\n    createRenderEffect(() => {\n        const { value, state } = source();\n        if (value !== untrack(reference)) {\n            start(() => {\n                setReference(value);\n                setState(state);\n            });\n        }\n    });\n    if (!isServer) {\n        function handleAnchorClick(evt) {\n            if (evt.defaultPrevented ||\n                evt.button !== 0 ||\n                evt.metaKey ||\n                evt.altKey ||\n                evt.ctrlKey ||\n                evt.shiftKey)\n                return;\n            const a = evt\n                .composedPath()\n                .find(el => el instanceof Node && el.nodeName.toUpperCase() === \"A\");\n            if (!a)\n                return;\n            const isSvg = a instanceof SVGAElement;\n            const href = isSvg ? a.href.baseVal : a.href;\n            const target = isSvg ? a.target.baseVal : a.target;\n            if (target || (!href && !a.hasAttribute(\"state\")))\n                return;\n            const rel = (a.getAttribute(\"rel\") || \"\").split(/\\s+/);\n            if (a.hasAttribute(\"download\") || (rel && rel.includes(\"external\")))\n                return;\n            const url = isSvg ? new URL(href, document.baseURI) : new URL(href);\n            if (url.origin !== window.location.origin ||\n                (basePath && url.pathname && !url.pathname.toLowerCase().startsWith(basePath.toLowerCase())))\n                return;\n            const to = parsePath(url.pathname + url.search + url.hash);\n            const state = a.getAttribute(\"state\");\n            evt.preventDefault();\n            navigateFromRoute(baseRoute, to, {\n                resolve: false,\n                replace: a.hasAttribute(\"replace\"),\n                scroll: !a.hasAttribute(\"noscroll\"),\n                state: state && JSON.parse(state)\n            });\n        }\n        document.addEventListener(\"click\", handleAnchorClick);\n        onCleanup(() => document.removeEventListener(\"click\", handleAnchorClick));\n    }\n    return {\n        base: baseRoute,\n        out: output,\n        location,\n        isRouting,\n        renderPath,\n        parsePath,\n        navigatorFactory\n    };\n}\nexport function createRouteContext(router, parent, child, match) {\n    const { base, location, navigatorFactory } = router;\n    const { pattern, element: outlet, preload, data } = match().route;\n    const path = createMemo(() => match().path);\n    const params = createMemoObject(() => match().params);\n    preload && preload();\n    const route = {\n        parent,\n        pattern,\n        get child() {\n            return child();\n        },\n        path,\n        params,\n        outlet,\n        resolvePath(to) {\n            return resolvePath(base.path(), to, path());\n        }\n    };\n    route.data = data\n        ? data({ data: parent.data, params, location, navigate: navigatorFactory(route) })\n        : parent.data;\n    return route;\n}\n"],"names":["createContext"],"mappings":"smBAKgCA,IACDA"}