import{renderToStream as t,createComponent as o,renderToStringAsync as s,renderToString as e}from"solid-js/web";import{DateTime as r}from"@swindle/core";import{Process as n}from"@swindle/os";import{Path as i}from"@swindle/filesystem";import l from"express";const c=(c,p,m=[])=>{const a=l();m.length>0&&a.use(...m),a.use(l.static(i.FromSegments(n.Cwd(),"assets").toString())),a.get("*",(async(r,n)=>{const i={server:{debug:"development"===p.env,port:p.port,url:r.url}};if("stream"===p.ssr)t((()=>o(c,{context:i}))).pipe(n);else try{let t;t="async"===p.ssr?await s((()=>o(c,{context:i}))):e((()=>o(c,{context:i}))),n.status(200).send(t)}catch(t){console.log(t.message),n.status(500).send("Server Error")}})),console.log("Starting app"),a.listen(p.port).on("listening",(()=>{console.log(`[${r.Now().toString()}]: Application successfully running on ${p.host}:${p.port}`)})).on("error",(t=>{throw t}))};export{c as runServer};
